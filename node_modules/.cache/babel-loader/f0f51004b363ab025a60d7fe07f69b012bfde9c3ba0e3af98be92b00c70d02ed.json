{"ast":null,"code":"//require('dotenv').config();\nconst key = bf6d6642c75090cff512;\nconst secret = \"34ce04e4d5d4b1bd9648b8c5701b34161d7e8beaefdadb963ef8477853fa830e\";\nconst axios = require('axios');\nconst FormData = require('form-data');\nexport const uploadJSONToIPFS = async JSONBody => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  //making axios POST request to Pinata ⬇️\n  return axios.post(url, JSONBody, {\n    headers: {\n      'pinata_api_key': key,\n      'pinata_secret_api_key': secret,\n      \"path\": \"Anime\"\n    }\n  }).then(function (response) {\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\nexport const uploadFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  //making axios POST request to Pinata ⬇️\n\n  let data = new FormData();\n  data.append('file', file, {\n    filepath: \"Animeverse\"\n  });\n\n  // const metadata = JSON.stringify({\n  //     name: 'testname',\n  //     keyvalues: {\n  //         exampleKey: 'exampleValue'\n  //     }\n  // });\n  // data.append('pinataMetadata', metadata);\n\n  //pinataOptions are optional\n  // const pinataOptions = JSON.stringify({\n  //     cidVersion: 0,\n  //     customPinPolicy: {\n  //         regions: [\n  //             {\n  //                 id: 'FRA1',  \n  //                 desiredReplicationCount: 1\n  //             },\n  //             {\n  //                 id: 'NYC1',\n  //                 desiredReplicationCount: 2\n  //             }\n  //         ]\n  //     }\n  // });\n  // data.append('pinataOptions', pinataOptions);\n\n  return axios.post(url, data, {\n    maxBodyLength: 'Infinity',\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      \"pinata_api_key\": key,\n      \"pinata_secret_api_key\": secret,\n      \"path\": \"Anime\"\n    }\n  }).then(function (response) {\n    console.log(\"image uploaded\", response.data.IpfsHash);\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error, \"Error uploading file to IPFS\");\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};","map":{"version":3,"names":["key","bf6d6642c75090cff512","secret","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","filepath","maxBodyLength","_boundary"],"sources":["C:/Users/NITYAM TRIPATHI/OneDrive/Desktop/bcd/RTW3-Week7-NFT-Marketplace/src/pinata.js"],"sourcesContent":["//require('dotenv').config();\r\nconst key = bf6d6642c75090cff512;\r\nconst secret = \"34ce04e4d5d4b1bd9648b8c5701b34161d7e8beaefdadb963ef8477853fa830e\";\r\n\r\nconst axios = require('axios');\r\nconst FormData = require('form-data');\r\n\r\nexport const uploadJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                'pinata_api_key': key,\r\n                'pinata_secret_api_key': secret,\r\n                \"path\": \"Anime\",\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};\r\n\r\nexport const uploadFileToIPFS = async(file) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    \r\n    let data = new FormData();\r\n    data.append('file', file,{filepath: \"Animeverse\"});\r\n\r\n    // const metadata = JSON.stringify({\r\n    //     name: 'testname',\r\n    //     keyvalues: {\r\n    //         exampleKey: 'exampleValue'\r\n    //     }\r\n    // });\r\n    // data.append('pinataMetadata', metadata);\r\n\r\n    //pinataOptions are optional\r\n    // const pinataOptions = JSON.stringify({\r\n    //     cidVersion: 0,\r\n    //     customPinPolicy: {\r\n    //         regions: [\r\n    //             {\r\n    //                 id: 'FRA1',  \r\n    //                 desiredReplicationCount: 1\r\n    //             },\r\n    //             {\r\n    //                 id: 'NYC1',\r\n    //                 desiredReplicationCount: 2\r\n    //             }\r\n    //         ]\r\n    //     }\r\n    // });\r\n    // data.append('pinataOptions', pinataOptions);\r\n\r\n    return axios \r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                \"pinata_api_key\": key,\r\n                \"pinata_secret_api_key\": secret,\r\n                \"path\": \"Anime\",\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            console.log(\"image uploaded\", response.data.IpfsHash)\r\n            return {\r\n               success: true,\r\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error,\"Error uploading file to IPFS\")\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGC,oBAAoB;AAChC,MAAMC,MAAM,GAAG,kEAAkE;AAEjF,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AAErC,OAAO,MAAME,gBAAgB,GAAG,MAAMC,QAAQ,IAAK;EAC/C,MAAMC,GAAG,GAAI,gDAA+C;EAC5D;EACA,OAAOL,KAAK,CACPM,IAAI,CAACD,GAAG,EAAED,QAAQ,EAAE;IACjBG,OAAO,EAAE;MACL,gBAAgB,EAAEV,GAAG;MACrB,uBAAuB,EAAEE,MAAM;MAC/B,MAAM,EAAE;IACZ;EACJ,CAAC,CAAC,CACDS,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACvB,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACpE,CAAC;EACJ,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO;MACHL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACnB,CAAC;EAET,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAMC,IAAI,IAAK;EAC3C,MAAMf,GAAG,GAAI,gDAA+C;EAC5D;;EAEA,IAAIO,IAAI,GAAG,IAAIV,QAAQ,CAAC,CAAC;EACzBU,IAAI,CAACS,MAAM,CAAC,MAAM,EAAED,IAAI,EAAC;IAACE,QAAQ,EAAE;EAAY,CAAC,CAAC;;EAElD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAOtB,KAAK,CACPM,IAAI,CAACD,GAAG,EAAEO,IAAI,EAAE;IACbW,aAAa,EAAE,UAAU;IACzBhB,OAAO,EAAE;MACL,cAAc,EAAG,iCAAgCK,IAAI,CAACY,SAAU,EAAC;MACjE,gBAAgB,EAAE3B,GAAG;MACrB,uBAAuB,EAAEE,MAAM;MAC/B,MAAM,EAAE;IACZ;EACJ,CAAC,CAAC,CACDS,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACtBO,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAAC;IACrD,OAAO;MACJH,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACpE,CAAC;EACJ,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,8BAA8B,CAAC;IACjD,OAAO;MACHL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACnB,CAAC;EAET,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}